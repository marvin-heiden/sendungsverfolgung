<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="thread.delay" elementType="Argument">
            <stringProp name="Argument.name">thread.delay</stringProp>
            <stringProp name="Argument.value">125</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">milliseconds</stringProp>
          </elementProp>
          <elementProp name="thread.number" elementType="Argument">
            <stringProp name="Argument.name">thread.number</stringProp>
            <stringProp name="Argument.value">64</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loop.count" elementType="Argument">
            <stringProp name="Argument.name">loop.count</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">= seconds</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Kafka Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="bootstrap.servers" elementType="Argument">
            <stringProp name="Argument.name">bootstrap.servers</stringProp>
            <stringProp name="Argument.value">trackingeventns.servicebus.windows.net:9093</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="security.protocol" elementType="Argument">
            <stringProp name="Argument.name">security.protocol</stringProp>
            <stringProp name="Argument.value">SASL_SSL</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sasl.mechanism" elementType="Argument">
            <stringProp name="Argument.name">sasl.mechanism</stringProp>
            <stringProp name="Argument.value">PLAIN</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="java.security.auth.login.config" elementType="Argument">
            <stringProp name="Argument.name">java.security.auth.login.config</stringProp>
            <stringProp name="Argument.value">/Users/mheiden/Projects/sendungsverfolgung/loadTesting/jaas.conf</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loop.count}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${thread.number}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">200</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <com.gslab.pepper.config.plaintext.PlainTextConfigElement guiclass="TestBeanGUI" testclass="com.gslab.pepper.config.plaintext.PlainTextConfigElement" testname="Pepper-Box PlainText Config" enabled="true">
          <stringProp name="jsonSchema">{
    &quot;MessageHeader&quot; : {
        &quot;MsgUUID&quot; : &quot;{{UUID()}}&quot;,
        &quot;MsgSender&quot; : &quot;MessageProducer&quot;,
        &quot;MsgReceiver&quot; : &quot;TrackingService&quot;,
        &quot;MsgTimestamp&quot; : &quot;{{DATE(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSSZ&quot;)}}&quot;
    },
    &quot;Event&quot; : {
        &quot;EventUUID&quot; : &quot;{{UUID()}}&quot;,
        &quot;EventTimestamp&quot; : &quot;{{DATE(&quot;yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSSZ&quot;)}}&quot;,
        &quot;EventType&quot; : &quot;Abgangszentrum&quot;,
        &quot;ScanFacility&quot; : &quot;Athens&quot;,
        &quot;Message&quot; : &quot;Die Sendung wurde im Abgangszentrum bearbeitet und befindet sich auf dem Weg zum Zielgebiet.&quot;,
        &quot;Sender&quot; : {
            &quot;Name&quot; : &quot;{{FIRST_NAME()}} {{LAST_NAME()}}&quot;,
            &quot;Street&quot; : &quot;{{RANDOM_ALPHA_NUMERIC(&quot;abcdefghijklmn&quot;, 25)}}&quot;,
            &quot;HouseNumber&quot; : &quot;{{RANDOM_INT_RANGE(1,999)}}&quot;,
            &quot;City&quot; : &quot;{{RANDOM_ALPHA_NUMERIC(&quot;abcdefghijklmn&quot;, 20)}}&quot;,
            &quot;PostCode&quot; : &quot;{{RANDOM_ALPHA_NUMERIC(&quot;0123456789&quot;, 8)}}&quot;,
            &quot;CityDistrict&quot; : &quot;{{RANDOM_ALPHA_NUMERIC(&quot;abcdefghijklmn&quot;, 10)}}&quot;,
            &quot;PostBox&quot; : &quot;{{RANDOM_ALPHA_NUMERIC(&quot;0123456789&quot;, 8)}}&quot;,
            &quot;Country&quot; : &quot;DE&quot;,
            &quot;Email&quot; : &quot;{{EMAIL(&quot;test.com&quot;)}}&quot;,
            &quot;Phone&quot; : &quot;{{PHONE()}}&quot;,
            &quot;Fax&quot; : &quot;{{PHONE()}}&quot;
        },
        &quot;Receiver&quot; : {
            &quot;Name&quot; : &quot;{{FIRST_NAME()}} {{LAST_NAME()}}&quot;,
            &quot;Street&quot; : &quot;{{RANDOM_ALPHA_NUMERIC(&quot;abcdefghijklmn&quot;, 25)}}&quot;,
            &quot;HouseNumber&quot; : &quot;{{RANDOM_INT_RANGE(1,999)}}&quot;,
            &quot;City&quot; : &quot;{{RANDOM_ALPHA_NUMERIC(&quot;abcdefghijklmn&quot;, 20)}}&quot;,
            &quot;PostCode&quot; : &quot;{{RANDOM_ALPHA_NUMERIC(&quot;0123456789&quot;, 8)}}&quot;,
            &quot;CityDistrict&quot; : &quot;{{RANDOM_ALPHA_NUMERIC(&quot;abcdefghijklmn&quot;, 10)}}&quot;,
            &quot;PostBox&quot; : &quot;{{RANDOM_ALPHA_NUMERIC(&quot;0123456789&quot;, 8)}}&quot;,
            &quot;Country&quot; : &quot;DE&quot;,
            &quot;Email&quot; : &quot;{{EMAIL(&quot;test.com&quot;)}}&quot;,
            &quot;Phone&quot; : &quot;{{PHONE()}}&quot;,
            &quot;Fax&quot; : &quot;{{PHONE()}}&quot;
        },
        &quot;Identifiers&quot; : [ {
            &quot;Type&quot; : &quot;Versandmarke&quot;,
            &quot;Value&quot; : &quot;{{org.apache.jmeter.threads.JMeterContextService.getContext().getVariables().get(&quot;identifier&quot;)}}&quot;,
            &quot;Amount&quot; : {{RANDOM_FLOAT(1.55F ,2.00F, 3.60F, 4.10F)}},
            &quot;Currency&quot; : &quot;EUR&quot;
        } ]
    }
}</stringProp>
          <stringProp name="placeHolder">MESSAGE</stringProp>
        </com.gslab.pepper.config.plaintext.PlainTextConfigElement>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="identifier" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">identifier</stringProp>
          <stringProp name="CounterConfig.format">b0000000000000000b</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">4</stringProp>
        </LoopController>
        <hashTree>
          <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Java Request" enabled="true">
            <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="bootstrap.servers" elementType="Argument">
                  <stringProp name="Argument.name">bootstrap.servers</stringProp>
                  <stringProp name="Argument.value">${bootstrap.servers}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="zookeeper.servers" elementType="Argument">
                  <stringProp name="Argument.name">zookeeper.servers</stringProp>
                  <stringProp name="Argument.value">&lt;Zookeeper List&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="kafka.topic.name" elementType="Argument">
                  <stringProp name="Argument.name">kafka.topic.name</stringProp>
                  <stringProp name="Argument.value">input</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="key.serializer" elementType="Argument">
                  <stringProp name="Argument.name">key.serializer</stringProp>
                  <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="value.serializer" elementType="Argument">
                  <stringProp name="Argument.name">value.serializer</stringProp>
                  <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="compression.type" elementType="Argument">
                  <stringProp name="Argument.name">compression.type</stringProp>
                  <stringProp name="Argument.value">none</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="batch.size" elementType="Argument">
                  <stringProp name="Argument.name">batch.size</stringProp>
                  <stringProp name="Argument.value">16384</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="linger.ms" elementType="Argument">
                  <stringProp name="Argument.name">linger.ms</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="buffer.memory" elementType="Argument">
                  <stringProp name="Argument.name">buffer.memory</stringProp>
                  <stringProp name="Argument.value">33554432</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="acks" elementType="Argument">
                  <stringProp name="Argument.name">acks</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="send.buffer.bytes" elementType="Argument">
                  <stringProp name="Argument.name">send.buffer.bytes</stringProp>
                  <stringProp name="Argument.value">131072</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="receive.buffer.bytes" elementType="Argument">
                  <stringProp name="Argument.name">receive.buffer.bytes</stringProp>
                  <stringProp name="Argument.value">32768</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="security.protocol" elementType="Argument">
                  <stringProp name="Argument.name">security.protocol</stringProp>
                  <stringProp name="Argument.value">${security.protocol}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="keyed.message" elementType="Argument">
                  <stringProp name="Argument.name">keyed.message</stringProp>
                  <stringProp name="Argument.value">YES</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="message.key.placeholder" elementType="Argument">
                  <stringProp name="Argument.name">message.key.placeholder</stringProp>
                  <stringProp name="Argument.value">identifier</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="message.value.placeholder" elementType="Argument">
                  <stringProp name="Argument.name">message.value.placeholder</stringProp>
                  <stringProp name="Argument.value">MESSAGE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="kerberos.auth.enabled" elementType="Argument">
                  <stringProp name="Argument.name">kerberos.auth.enabled</stringProp>
                  <stringProp name="Argument.value">YES</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="java.security.auth.login.config" elementType="Argument">
                  <stringProp name="Argument.name">java.security.auth.login.config</stringProp>
                  <stringProp name="Argument.value">${java.security.auth.login.config}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="java.security.krb5.conf" elementType="Argument">
                  <stringProp name="Argument.name">java.security.krb5.conf</stringProp>
                  <stringProp name="Argument.value">&lt;krb5.conf location&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sasl.kerberos.service.name" elementType="Argument">
                  <stringProp name="Argument.name">sasl.kerberos.service.name</stringProp>
                  <stringProp name="Argument.value">kafka</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sasl.mechanism" elementType="Argument">
                  <stringProp name="Argument.name">sasl.mechanism</stringProp>
                  <stringProp name="Argument.value">${sasl.mechanism}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssl.enabled" elementType="Argument">
                  <stringProp name="Argument.name">ssl.enabled</stringProp>
                  <stringProp name="Argument.value">NO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssl.key.password" elementType="Argument">
                  <stringProp name="Argument.name">ssl.key.password</stringProp>
                  <stringProp name="Argument.value">&lt;Key Password&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssl.keystore.location" elementType="Argument">
                  <stringProp name="Argument.name">ssl.keystore.location</stringProp>
                  <stringProp name="Argument.value">&lt;Keystore Location&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssl.keystore.password" elementType="Argument">
                  <stringProp name="Argument.name">ssl.keystore.password</stringProp>
                  <stringProp name="Argument.value">&lt;Keystore Password&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssl.keystore.type" elementType="Argument">
                  <stringProp name="Argument.name">ssl.keystore.type</stringProp>
                  <stringProp name="Argument.value">JKS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssl.truststore.location" elementType="Argument">
                  <stringProp name="Argument.name">ssl.truststore.location</stringProp>
                  <stringProp name="Argument.value">&lt;Truststore Location&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssl.truststore.password" elementType="Argument">
                  <stringProp name="Argument.name">ssl.truststore.password</stringProp>
                  <stringProp name="Argument.value">&lt;Truststore Password&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssl.truststore.type" elementType="Argument">
                  <stringProp name="Argument.name">ssl.truststore.type</stringProp>
                  <stringProp name="Argument.value">JKS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ssl.endpoint.identification.algorithm" elementType="Argument">
                  <stringProp name="Argument.name">ssl.endpoint.identification.algorithm</stringProp>
                  <stringProp name="Argument.value">EMPTY_STRING</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="classname">com.gslab.pepper.sampler.PepperBoxKafkaSampler</stringProp>
          </JavaSampler>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${thread.delay}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="RespTimeGraph.interval">100</stringProp>
              <intProp name="RespTimeGraph.lineshapepoint">4</intProp>
              <stringProp name="RespTimeGraph.yaxisscalemaxvalue">1500</stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
